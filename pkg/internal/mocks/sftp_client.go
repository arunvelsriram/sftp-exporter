// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/client/sftp_client.go
//
// Generated by this command:
//
//	mockgen -source pkg/client/sftp_client.go -destination pkg/internal/mocks/sftp_client.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	fs "github.com/kr/fs"
	sftp "github.com/pkg/sftp"
	gomock "go.uber.org/mock/gomock"
)

// MockSFTPClient is a mock of SFTPClient interface.
type MockSFTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockSFTPClientMockRecorder
	isgomock struct{}
}

// MockSFTPClientMockRecorder is the mock recorder for MockSFTPClient.
type MockSFTPClientMockRecorder struct {
	mock *MockSFTPClient
}

// NewMockSFTPClient creates a new mock instance.
func NewMockSFTPClient(ctrl *gomock.Controller) *MockSFTPClient {
	mock := &MockSFTPClient{ctrl: ctrl}
	mock.recorder = &MockSFTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSFTPClient) EXPECT() *MockSFTPClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSFTPClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSFTPClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSFTPClient)(nil).Close))
}

// Connect mocks base method.
func (m *MockSFTPClient) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockSFTPClientMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockSFTPClient)(nil).Connect))
}

// StatVFS mocks base method.
func (m *MockSFTPClient) StatVFS(path string) (*sftp.StatVFS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatVFS", path)
	ret0, _ := ret[0].(*sftp.StatVFS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatVFS indicates an expected call of StatVFS.
func (mr *MockSFTPClientMockRecorder) StatVFS(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatVFS", reflect.TypeOf((*MockSFTPClient)(nil).StatVFS), path)
}

// Walk mocks base method.
func (m *MockSFTPClient) Walk(root string) *fs.Walker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walk", root)
	ret0, _ := ret[0].(*fs.Walker)
	return ret0
}

// Walk indicates an expected call of Walk.
func (mr *MockSFTPClientMockRecorder) Walk(root any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockSFTPClient)(nil).Walk), root)
}
